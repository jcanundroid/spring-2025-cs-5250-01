// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array contents;
	field int maximumLength;
	field int length;

	/** constructs a new empty string with a maximum length of maxLength
	 *  and initial length of 0. */
	constructor String new(int maxLength) {
		if (maxLength = 0) {
			let contents = null;
		}
		else {
			let contents = Array.new(maxLength);
		}

		let maximumLength = maxLength;
		let length = 0;

		return this;
	}

	/** Disposes this string. */
	method void dispose() {
		if (~(contents = null)) {
			do contents.dispose();
		}

		return;
	}

	/** Returns the current length of this string. */
	method int length() {
		return length;
	}

	/** Returns the character at the j-th location of this string. */
	method char charAt(int j) {
		if (j < length) {
			return contents[j];
		}

		return null;
	}

	/** Sets the character at the j-th location of this string to c. */
	method void setCharAt(int j, char c) {
		if (j < length) {
			let contents[j] = c;
		}

		return;
	}

	/** Appends c to this string's end and returns this string. */
	method String appendChar(char c) {
		if (length < maximumLength) {
			let contents[length] = c;
			let length = length + 1;
		}

		return this;
	}

	/** Erases the last character from this string. */
	method void eraseLastChar() {
		if (length > 0) {
			let length = length - 1;
		}

		return;
	}

	/** Returns the integer value of this string, 
	 *  until a non-digit character is detected. */
	method int intValue() {
		var int value;
		var char c;
		var int i;
		var boolean done;

		let value = 0;
		let i = 0;
		let done = false;

		if (contents[0] = 45) {
			let i = 1;
		}

		while (~done) {
			if (i = length) {
				let done = true;
			}
			else {
				let c = contents[i];

				if ((c < 48) | (c > 57)) {
					let done = true;
				}
				else {
					let value = Math.multiply(value, 10) + (c - 48);
				}
			}

			let i = i + 1;
		}

		if (contents[0] = 45) {
			let value = -value;
		}
		
		return value;
	}

	/** Sets this string to hold a representation of the given value. */
	method void setInt(int val) {
		var int value;
		var int valueLength;
		var int remainder;
		var int i;
		var boolean negative;
		var boolean done;

		let valueLength = 1;
		let negative = false;

		if (val < 0) {
			let negative = true;
			let valueLength = 2;
			let val = -val;
		}

		let value = val;

		while (value > 9) {
			let valueLength = valueLength + 1;
			let value = Math.divide(value, 10);
		}

		do dispose();

		let contents = Array.new(valueLength);
		let maximumLength = valueLength;
		let length = valueLength;

		if (negative) {
			let contents[0] = 45;
		}

		let value = val;
		let i = valueLength - 1;
		let done = false;

		while (~done) {
			let remainder = value - Math.multiply(Math.divide(value, 10), 10);
			let contents[i] = remainder + 48;
			let i = i - 1;

			if (value < 10) {
				let done = true;
			}
			else {
				let value = Math.divide(value, 10);
			}
		}

		return;
	}

	/** Returns the new line character. */
	function char newLine() {
		return 128;
	}

	/** Returns the backspace character. */
	function char backSpace() {
		return 129;
	}

	/** Returns the double quote (") character. */
	function char doubleQuote() {
		return 34;
	}
}
