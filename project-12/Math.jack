// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
	static int n;             // Number of bits used for representing a two's complement integer
	static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

	// Initializes the Math library.
	function void init() {
		let n = 16;
		let powersOfTwo = Array.new(n);

		let powersOfTwo[0]  =     1;
		let powersOfTwo[1]  =     2;
		let powersOfTwo[2]  =     4;
		let powersOfTwo[3]  =     8;
		let powersOfTwo[4]  =    16;
		let powersOfTwo[5]  =    32;
		let powersOfTwo[6]  =    64;
		let powersOfTwo[7]  =   128;
		let powersOfTwo[8]  =   256;
		let powersOfTwo[9]  =   512;
		let powersOfTwo[10] =  1024;
		let powersOfTwo[11] =  2048;
		let powersOfTwo[12] =  4096;
		let powersOfTwo[13] =  8192;
		let powersOfTwo[14] = 16384;
		let powersOfTwo[15] = 32767 + 1;

		return;
	}

	/** Returns the product of x and y. 
	 *  When a Jack compiler detects the multiplication operator '*'
	 *  in an expression, it handles it by invoking this method. 
	 *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
	function int multiply(int x, int y) {
		var int sum;
		var int j;
		var int p;
		var boolean positive;

		let positive = true;

		if (x < 0) {
			let positive = false;
			let x = -x;
		}

		if (y < 0) {
			let positive = ~positive;
			let y = -y;
		}

		let sum = 0;
		let j = 0;

		while (j < n) {
			let p = powersOfTwo[j];

			if ((y & p) > 0) {
				let sum = sum + x;
			}

			let x = x + x;
			let j = j + 1;
		}

		if (~positive) {
			let sum = -sum;
		}

		return sum;
	}

	/** Returns the integer part of x / y.
	 *  When a Jack compiler detects the division operator '/'
	 *  an an expression, it handles it by invoking this method.
	 *  Thus, x/y and Math.divide(x,y) return the same value. */
	function int divide(int x, int y) {
		var int q;
		var int qDoubled;
		var int t;
		var int result;
		var boolean positive;

		let positive = true;

		if (x < 0) {
			let positive = false;
			let x = -x;
		}

		if (y < 0) {
			let positive = ~positive;
			let y = -y;
		}

		if (y > x) {
			return 0;
		}

		let q = Math.divide(x, Math.multiply(y, 2));
		let qDoubled = Math.multiply(q, 2);
		let t = x - Math.multiply(qDoubled, y);

		if (t < y) {
			let result = qDoubled;
		}
		else {
			let result = qDoubled + 1;
		}

		if (~positive) {
			let result = -result;
		}

		return result;
	}

	/** Returns the integer part of the square root of x. */
	function int sqrt(int x) {
		var int y;
		var int j;
		var int d;
		var int dSquared;

		let y = 0;
		let j = Math.divide(n, 2) - 1;

		while (~(j < 0)) {
			let d = y + powersOfTwo[j];
			let dSquared = Math.multiply(d, d);

			if ((dSquared > 0) & (~(dSquared > x))) {
				let y = d;
			}

			let j = j - 1;
		}

		return y;
	}

	/** Returns the greater value. */
	function int max(int a, int b) {
		if (a > b) {
			return a;
		}

		return b;
	}

	/** Returns the smaller value. */
	function int min(int a, int b) {
		if (a < b) {
			return a;
		}

		return b;
	}

	/** Returns the absolute value of x. */
	function int abs(int x) {
		if (x < 0) {
			return -x;
		}

		return x;
	}
}
